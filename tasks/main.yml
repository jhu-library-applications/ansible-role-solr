---
- name: set
  set_fact:
    solr_minimum_java_version: 1.8
  when: solr_major_version < 6

- name: get java version
  shell:   "java -version 2>&1"
  register: java_version_result
  changed_when: false

  # NOTE: regex_search() returns an array of matches, so we will need to use the 'first' filter to make use of the first (and only) value
- set_fact: returned_java_version={{ java_version_result.stdout | regex_replace('^$','0.0.0') | regex_search('(?P<test>\d+\.\d+.\d+)', '\\g<test>' ) | first }}

- name: test java version
  fail:
    msg: "this installation of solr requires java version {{ solr_minimum_java_version }} or higher"
  when: "not returned_java_version is version(solr_minimum_java_version, '>=')"

- name: add solr user group
  group:
    name:     "{{ solr_group }}"
    gid:      "{{ solr_group_gid | default(omit) }}"
    state: present
  become: true

- name: add solr user
  user:
    name:     "{{ solr_user }}"
    shell:    "/bin/bash"
    uid:      "{{ solr_user_uid  | default(omit) }}"
    group:    "{{ solr_group }}"
    comment:  "{{ solr_user }} system account"
  become: true

- name: RedHat - install lsof
  yum: name=lsof state=present
  become: true
  when: ansible_os_family == 'RedHat'

- name: get solr checksum
  set_fact:
    solr_checksum: "{{ solr_checksum_algo }}:{{ item | replace(' *' + solr_download_file,'') }}"
  with_url: "{{ solr_checksum_url }}"

- name: get solr
  get_url:
    url: "{{ solr_download_url }}"
    dest: "{{ solr_download_dir }}"
    checksum: "{{ solr_checksum }}"

- name: extract solr_install_script
  shell: "tar xzf {{ solr_download_dir }}/{{ solr_download_file }} --directory={{ solr_download_dir }} {{ solr_dir }}/bin/{{ solr_install_script }} --strip-components=2"
  args:
    warn: no
    # TODOn't: prevents upgrading
    # creates: "{{ solr_download_dir }}/{{ solr_install_script }}"

- name: set upgrade argument according to configuration
  set_fact:
    solr_upgrade_arg: ""
  when: not solr_upgrade

  # TODO: create systemd unit file, rather than relying on
  # the tres basic init.d script we get from the installer
  # sudo bash ./install_solr_service.sh solr-5.0.0.tgz -i /opt -d /var/solr -u solr -s solr -p 8983
- name: run solr_install_script
  shell: >
    {{ solr_download_dir }}/{{ solr_install_script }} {{ solr_download_dir }}/{{ solr_download_file }}
    -i {{ solr_install_dir }}
    -d {{ solr_var_dir }}
    -u {{ solr_user }}
    -s {{ solr_service }}
    -p {{ solr_port }}
    {{ solr_upgrade_arg }}
  args:
    creates: "{{ solr_install_dir }}/{{ solr_dir }}/bin/solr"
  register: solr_install_result
  become: true

  # NOTE: workaround for systemd on RedHat-family OSes
  # NOTE: have to use command, rather than the service module
  # (because that would address systemd)
- block:
  - name: stop solr service
    command: service solr stop
    args:
      warn: no
    become: true

  - name: reload solr service in systemd
    systemd:
      name: "{{ solr_service }}"
      daemon_reload: yes
    become: true
  when: ansible_os_family == 'RedHat' and solr_install_result.changed

- name: enable and start the solr service
  service:
    name: "{{ solr_service }}"
    state: started
    enabled: yes
  become: true

- name: create cores
  command: "{{ solr_bin }}/solr create -c {{ item }} -d basic_configs"
  args:
    creates: "{{ solr_home }}/{{ item }}"
  become: true
  become_user: "{{ solr_user }}"
  with_items: "{{ solr_cores }}"

- name: set solr environment vars from template
  template:
    src:  "{{ solr_env_template }}"
    dest: "/etc/default/{{ solr_service }}.in.sh"
    owner: root
    mode: 0644
  become: true
  when: solr_env_template != ""
  notify: restart solr

- name: set solr environment vars from vars
  lineinfile:
    dest: "/etc/default/{{ solr_service }}.in.sh"
    regexp: "^{{ item.var }}"
    line:   '{{ item.var }}="{{ item.value }}"'
    state: present
    backrefs: "{{ item.backrefs | default(false) }}"
  become: true
  with_items: "{{ solr_env_vars }}"
  notify: restart solr
